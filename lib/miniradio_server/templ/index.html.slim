doctype html
html
    head
        meta charset="UTF-8"
        meta name="viewport" content="width=device-width, initial-scale=1.0"
        title Miniradio Server
        link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css" type="text/css"
        link rel="stylesheet" href="style/main.css" type="text/css"
        script src="https://cdn.jsdelivr.net/npm/hls.js@1"
    body
        h1 Straming List
        button id="startButton" Play all ▶️
        table.compact.striped
            thead
                tr
                    th scope="col" Play
                    th scope="col" Title
                    th scope="col" Artist
                    th scope="col" Album
            tbody
                - mp3_list.each_with_index do |mp3, i|
                    tr
                        td
                            audio controls=true id='audio-#{i+1}'
                        td=mp3[:title] || mp3[:file]
                        td=mp3[:artist]
                        td=mp3[:album]
        javascript:
            const mp3s = #{{JSON.generate(mp3_list)}};
            const audioConfigs = [];
            for (let i = 0; i < mp3s.length; i++) {
                audioConfigs.push({ id: `audio-${i+1}`, url: `/stream/${mp3s[i].file}/playlist.m3u8`});
            }
            const audioElements = [];
            let currentIndex = 0;

            function setupAudio(audioConfig, index) {
                const el = document.getElementById(audioConfig.id);
                audioElements.push(el);

                // Safari: Native HLS Support
                if (el.canPlayType('application/vnd.apple.mpegurl')) {
                    el.dataset.hlsSrc = audioConfig.url;

                    // Safari sets src on playback
                    el.addEventListener('play', () => {
                        if (!el.src) {
                            el.src = el.dataset.hlsSrc;
                        }
                    });
                } else if (Hls.isSupported()) {
                    // Chrome, etc.: use Hls.js (attach before playback)
                    el.dataset.hlsSrc = audioConfig.url;
                }

                // Play next audio when playback ends
                el.addEventListener('ended', () => {
                    currentIndex++;
                    if (currentIndex < audioElements.length) {
                        playAudio(currentIndex);
                    } else {
                        console.log("All audio playback has been completed.");
                    }
                });
            }
            function playAudio(index) {
                const el = audioElements[index];

                if (!el) return;

                if (!el.canPlayType('application/vnd.apple.mpegurl') && Hls.isSupported()) {
                    const hls = new Hls();
                    hls.loadSource(el.dataset.hlsSrc);
                    hls.attachMedia(el);
                }

                el.play().catch(err => {
                    console.warn(`Playback of song-$(index + 1) was blocked:`)
                });
            }

            audioConfigs.forEach((config, index) => {
                setupAudio(config, index);
            })

            document.getElementById('startButton').addEventListener('click', () => {
                playAudio(0);
                document.getElementById('startButton').style.display = 'none';
            });
        hr
        p Miniradio ver #{MiniradioServer::VERSION}
